name: CI 자동화

on:
  pull_request:
    branches: [ "dev", "main" ]
  push:
    branches: [ "dev", "main" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      TAG: latest

    steps:
      - name: 소스 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17을 설치합니다
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 성능 향상을 위한 Gradle 패키지 캐싱하기
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Gradle build를 수행합니다 (환경변수 포함)
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_MAP_API_KEY: ${{ secrets.KAKAO_MAP_API_KEY }}
        run: |
          export DB_NAME DB_USERNAME DB_PASSWORD JWT_SECRET KAKAO_MAP_API_KEY
          ./gradlew build -Dspring.profiles.active=dev

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Build 와 Push
        uses: docker/build-push-action@v5.1.0
        with:
          push: true # 빌드 완료 후 Docker Hub로 푸시
          context: . # Dockerfile이 위치한 경로
          platforms: linux/amd64,linux/arm64 # 멀티 플랫폼 지원
          tags: ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.IMAGE_NAME}}:latest
          #cache-from: type=gha # GitHub Actions 캐싱 활성화
          #cache-to: type=gha,mode=max # 최대 캐싱 활성화